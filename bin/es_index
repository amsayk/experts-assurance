#!/usr/bin/env node

import cluster from 'cluster';

import config from 'build/config';

import createWorker from 'backend/kue-mq/createWorker';

import * as es from 'backend/es';

const log = require('log')('app:bin:es_index');

if (cluster.isMaster) {
  process.title = 'index: master';

  for (let i = 0; i < config.clusterWorkerSize; i++) {
    cluster.fork();
  }

  // Listen for dying workers
  cluster.on('exit', function (worker, code, signal) {
    log.error('Worker %d died :(', signal, worker.process.id);

    if (signal !== 'SIGKILL') {
      // Replace the dead worker,
      // we're not sentimental
      cluster.fork();
    }

  });
} else {
  process.title = 'index: worker process';

  const opts = {
    ...config.kue_opts,
    concurrency : 20,
  };

  createWorker(opts, 'ES_INDEX', {
    // docs
    async onDoc(req, done) {
      try {
        await es.onDoc(req.params.id);
        done();
      } catch (e) {
        done(new Error(e));
      }
    },
    async onDocDeleted(req, done) {
      try {
        await es.onDocDeleted(req.params.id);
        done();
      } catch (e) {
        done(new Error(e));
      }
    },

    // users
    async onUser(req, done) {
      try {
        await es.onUser(req.params.id);
        done();
      } catch (e) {
        done(new Error(e));
      }
    },
    async onSignUp(req, done) {
      try {
        await es.onSignUp(req.params.id);
        done();
      } catch (e) {
        done(new Error(e));
      }
    },
  });

}

