#!/usr/bin/env node

// import cluster from 'cluster';

import Parse from 'parse/node';
import config from 'build/config';
import { app, server } from 'server/main';

const log = require('log')('app:bin:server');

const port = normalizePort(config.server_port);
app.set('port', port);

// if (cluster.isMaster) {
//   // Set master process title (shows in `ps`).
//
//   process.title = `${config.appName} (master)`;

  async function onStart() {
    try {
      await Promise.all([
        Parse.Cloud.run('onStart', {}),
      ]);
      log('Server initialized.');
    } catch (e) {
      log.error('Error initializing server:', e);
    }
  }

//   if (__DEV__) {
//     onChildProcess();
//     setTimeout(onStart, 3 * 1000);
//   } else {
//
//     function gracefulShutdown() {
//       log('Master stopping.');
//
//       for (const id in cluster.workers) {
//         cluster.workers[id].kill();
//       }
//
//       process.exit(0);
//     }
//
//     // Listen for dying workers
//     cluster.on('exit', function (worker, code, signal) {
//       log.error('Worker %d died :(', worker.process.id);
//
//       // Replace the dead worker,
//       // we're not sentimental
//       cluster.fork();
//
//     });
//
//     // Master can be terminated by either SIGTERM
//     // or SIGINT. The latter is used by CTRL+C on console.
//
//     process.on('SIGTERM', gracefulShutdown);
//     process.on('SIGINT', gracefulShutdown);
//
//     // A child is loaded
//     cluster.once('listening', onStart);
//
//     // for (let i = 0; i < config.clusterWorkerSize; i++) {
//       cluster.fork();
//     // }
//   }
// } else {
//
//   process.title = `${config.appName} (slave)`;

  onChildProcess();
// }

function onChildProcess() {
  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  // Workers are terminated by SIGTERM sent
  // by the master.

  // http://www.oesmith.co.uk/post/15532216845

  process.on('SIGTERM', onStop);
  process.on('SIGINT', onStop);

  function onStop() {
    log('Stopping worker ' + process.pid);

    // Allow requests finish.

    server.close();
  }

  // When requests are finished, stop the server.

  server.on('close', function () {
    log('Worker ' + process.pid + ' stopped');

    process.exit(0);
  });
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server 'error' event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      log.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server 'listening' event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  log('Worker ' + process.pid + ' listening on ' + bind);


  onStart();
}

