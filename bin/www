#!/usr/bin/env node

import cluster from 'cluster';

import Parse from 'parse/node';
import config from 'build/config';
import { app, server } from 'server/main';

const log = require('log')('app:bin:server');

const port = normalizePort(config.server_port);
app.set('port', port);

if (cluster.isMaster && config.env === 'production') {
  for (let i = 0; i < config.clusterSize; i++) {
    cluster.fork();
  }

  // Listen for dying workers
  cluster.on('exit', function (worker, code, signal) {

    // Replace the dead worker,
    // we're not sentimental
    log.error('Worker %d died :(', worker.process.id);
    cluster.fork();

  });
} else {

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server 'error' event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      log.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server 'listening' event.
 */

async function onListening() {
  try {
    await Promise.all([
      Parse.Cloud.run('onStart', {}),
    ]);
    log('Server initialized.');
  } catch (e) {
    log.error('Error initializing server:', e);
  }

  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  log('Listening on ' + bind);
}

