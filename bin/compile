#!/usr/bin/env node

const fs = require('fs-extra')
const webpack = require('webpack')
const chalk = require('chalk')
const logger = require('build/lib/logger')
const webpackConfig = require('build/webpack.config')

const config = require('build/config')
const paths = config.utils_paths

// Wrapper around webpack to promisify its compiler and supply friendly logging
const runWebpackCompiler = (webpackConfig) =>
  new Promise((resolve, reject) => {
    const compiler = webpack(webpackConfig)

    compiler.run((err, stats) => {
      if (err) {
        logger.error('Webpack compiler encountered a fatal error.', err)
        return reject(err)
      }

      const jsonStats = stats.toJson()
      if (jsonStats.errors.length > 0) {
        logger.error('Webpack compiler encountered errors.')
        logger.log(jsonStats.errors.join('\n'))
        return reject(new Error('Webpack compiler encountered errors'))
      } else if (jsonStats.warnings.length > 0) {
        logger.warn('Webpack compiler encountered warnings.')
        logger.log(jsonStats.warnings.join('\n'))
      }
      resolve(jsonStats)
    })
  })

const compile = () => Promise.resolve()
  .then(() => logger.info('Starting compiler...'))
  .then(() => logger.info('Target application environment: ' + chalk.bold(config.env)))
  .then(() => runWebpackCompiler(webpackConfig))
  .then(stats => {
    logger.info(`Copying static assets from ./public to ./${paths.dist()}.`)
    fs.copySync(paths.public(), paths.dist())
    return stats
  })
  .then((stats) => {
    if (config.verbose) {
      logger.log(stats.toString({
        colors: true,
        chunks: false,
      }))
    }
    logger.success('Compilation completed successfully.')
  })
  .catch((err) => logger.error('Compiler encountered an error.', err))

compile()
